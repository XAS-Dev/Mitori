plugins {
    id 'java'
    id 'eclipse'
    // kotlin
    id 'org.jetbrains.kotlin.jvm' version "2.1.10"
    id "org.jetbrains.kotlin.kapt" version "2.1.10"
    //jb
    id "org.jetbrains.gradle.plugin.idea-ext" version "1.1.10"
    // shadow
    id 'com.github.johnrengelman.shadow' version '8.1.1'
}

group = 'xyz.xasmc'
version = '0.1.0-SNAPSHOT'

repositories {
    mavenCentral()
    maven {
        name = "papermc-repo"
        url = "https://repo.papermc.io/repository/maven-public/"
    }
    maven {
        name 'codemc'
        url 'https://repo.codemc.org/repository/maven-public/'
    }
}

def velocityVersion = "3.4.0-SNAPSHOT"
def skinsrestorerVersion = "15.6.0"

dependencies {
    // kotlin
    implementation "org.jetbrains.kotlin:kotlin-stdlib"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:1.8.1"
    // velocity
    compileOnly "com.velocitypowered:velocity-api:${velocityVersion}"
    kapt("com.velocitypowered:velocity-api:${velocityVersion}")
    annotationProcessor "com.velocitypowered:velocity-api:${velocityVersion}"
    // skinsrestorer
    compileOnly "net.skinsrestorer:skinsrestorer-api:${skinsrestorerVersion}"
    // project
    implementation project(":Mitori-Satori")


}

build {
    dependsOn(shadowJar)
}

shadowJar {
    mergeServiceFiles()
}

def targetJavaVersion = 21
java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'

    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        options.release.set(targetJavaVersion)
    }
}

def templateSource = file('src/main/templates')
def templateDest = layout.buildDirectory.dir('generated/sources/templates')
def generateTemplates = tasks.register('generateTemplates', Copy) { task ->
    def props = ['version': project.version]
    task.inputs.properties props

    task.from templateSource
    task.into templateDest
    task.expand props
}

sourceSets.main.java.srcDir(generateTemplates.map { it.outputs })

rootProject.idea.project.settings.taskTriggers.afterSync generateTemplates
project.eclipse.synchronizationTasks(generateTemplates)
kotlin {
    jvmToolchain(21)
}
